name: Install GCC
description: Install GCC

inputs:
  version:
    description: GCC version to install
    required: false
    default: latest
  platform:
    description: Target platform
    required: false
    default: x64
  cygwin:
    description: Install Cygwin packages
    required: false
    default: 0
  cc:
    description: Set up cc/gcc/c++/g++ executables
    required: false
    default: 1
  hardlinks:
    description: On Cygwin, replace executable symlinks with hardlinks
    required: false
    default: 0

outputs:
  gcc:
    description: gcc binary name
    value: '${{ steps.install.outputs.gcc }}'
  gxx:
    description: g++ binary name
    value: '${{ steps.install.outputs.gxx }}'

runs:
  using: composite
  steps:
    - id: install
      run: |
        New-Variable os -Value '${{ runner.os }}' -Option Constant

        New-Variable linux_host -Value ($os -eq 'Linux') -Option Constant
        New-Variable cygwin_host -Value ('${{ inputs.cygwin }}' -eq '1') -Option Constant
        New-Variable windows_host -Value ($os -eq 'Windows' -and !$cygwin_host) -Option Constant

        New-Variable version -Value ('${{ inputs.version }}') -Option Constant
        New-Variable latest -Value ($version -eq 'latest') -Option Constant
        New-Variable x64 -Value ('${{ inputs.platform }}' -eq 'x64') -Option Constant

        function Locate-Choco {
            $path = Get-Command 'choco' -ErrorAction SilentlyContinue
            if ($path) {
                $path.Path
            } else {
                Join-Path ${env:ProgramData} 'chocolatey' 'bin' 'choco'
            }
        }

        function Enable-TestingPPA {
            sudo add-apt-repository --yes --update ppa:ubuntu-toolchain-r/test
        }

        function Install-Package {
            param(
                [Parameter(Mandatory=$true, ValueFromRemainingArguments=$true)]
                [string[]] $Packages
            )

            if ($script:linux_host) {
                sudo apt-get update
                sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends $Packages
            } elseif ($script:cygwin_host) {
                $choco = Locate-Choco
                & $choco install $Packages -y --no-progress --source=cygwin
            } elseif ($script:windows_host) {
                $choco = Locate-Choco
                & $choco upgrade $Packages -y --no-progress --allow-downgrade
            } else {
                throw "Sorry, installing packages is unsupported on $script:os"
            }
        }

        if ($linux_host) {
            $pkg = 'g++'
            $gcc = 'gcc'
            $gxx = 'g++'
            if (!$latest) {
                Enable-TestingPPA
                $pkg += "-$version"
                $gcc += "-$version"
                $gxx += "-$version"
            }
            if (!$x64) {
                $pkg += '-multilib'
            }
            Install-Package $pkg
        } elseif ($cygwin_host) {
            if (!$x64) {
                echo @'
        ::warning ::
        32-bit-targeting GCC is unstable and/or unmaintained on 64-bit Cygwin.
        Please use 32-bit Cygwin instead.
        If you _are_ using 32-bit Cygwin, you can ignore this message.
        '@
            }

            $pkg = 'gcc-g++'
            $gcc = 'gcc'
            $gxx = 'g++'

            Install-Package $pkg
        } elseif ($windows_host) {
            # TODO: use setup-mingw when calling composite actions within
            # composite actions is implemented.
            echo @'
        ::error ::
        Please use the egor-tensin/setup-mingw action to install GCC on Windows.
        '@
            exit 1
        } else {
            throw "Sorry, installing GCC is unsupported on $os"
        }

        echo "gcc=$gcc" >> $env:GITHUB_OUTPUT
        echo "gxx=$gxx" >> $env:GITHUB_OUTPUT

      shell: pwsh

    - run: |
        New-Variable os -Value '${{ runner.os }}' -Option Constant

        New-Variable linux_host -Value ($os -eq 'Linux') -Option Constant
        New-Variable cygwin_host -Value ('${{ inputs.cygwin }}' -eq '1') -Option Constant
        New-Variable windows_host -Value ($os -eq 'Windows' -and !$cygwin_host) -Option Constant

        New-Variable cc -Value ('${{ inputs.cc }}' -eq '1') -Option Constant

        New-Variable gcc -Value '${{ steps.install.outputs.gcc }}' -Option Constant
        New-Variable gxx -Value '${{ steps.install.outputs.gxx }}' -Option Constant

        function Link-Exe {
            param(
                [Parameter(Mandatory=$true)]
                [string] $Exe,
                [Parameter(Mandatory=$true)]
                [string] $LinkName
            )

            $exe_path = (Get-Command $Exe).Path
            $link_dir = if ($script:windows_host) { Split-Path $exe_path } else { '/usr/local/bin' }
            $link_name = if ($script:windows_host) { "$LinkName.exe" } else { $LinkName }
            $link_path = if ($script:cygwin_host) { "$link_dir/$link_name" } else { Join-Path $link_dir $link_name }
            echo "Creating link $link_path -> $exe_path"
            if ($script:linux_host) {
                sudo ln -f -s $exe_path $link_path
            } elseif ($script:cygwin_host) {
                ln.exe -f -s $exe_path $link_path
            } elseif ($script:windows_host) {
                New-Item -ItemType HardLink -Path $link_path -Value $exe_path -Force | Out-Null
            }
        }

        if ($cc) {
            Link-Exe $gcc cc
            if ($gcc -ne 'gcc') {
                Link-Exe $gcc 'gcc'
            }
            Link-Exe $gxx c++
            if ($gxx -ne 'g++') {
                Link-Exe $gxx 'g++'
            }
        }
      shell: pwsh

    - run: |
        New-Variable cygwin_host -Value ('${{ inputs.cygwin }}' -eq '1') -Option Constant
        New-Variable hardlinks -Value ('${{ inputs.hardlinks }}' -eq '1') -Option Constant

        if ($cygwin_host -and $hardlinks) {
            echo @'
        while IFS= read -d '' -r link_path; do
            dest_path="$( readlink --canonicalize-existing -- "$link_path" )"
            dest_ext=".${dest_path##*.}"
            [ "$dest_ext" == ".$dest_path" ] && dest_ext=
            link_ext=".${link_path##*.}"
            [ "$link_ext" == ".$link_path" ] && link_ext=
            echo "Removing symlink $link_path" && rm -f -- "$link_path"
            [ "$link_ext" != "$dest_ext" ] && echo "${PATHEXT//\;/
        }" | grep -q --ignore-case --line-regexp -F -- "$dest_ext" && link_path="$link_path$dest_ext"
            echo "Creating hardlink $link_path -> $dest_path" && ln -- "$dest_path" "$link_path"
        done < <( find /usr/local/bin /usr/bin \
                       -type l '-(' \
                       -path /usr/local/bin/cc -o \
                       -path /usr/local/bin/c++ \
                       '-)' -print0 )
        '@ | & bash.exe --login -o errexit -o nounset -o pipefail -o igncr
        }
      shell: pwsh

branding:
  icon: star
  color: green
